Question Answers:

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

ANSWER:The parser took more time than ParallelWebCrawler because the ProfilingState class sums the elapsed time of all threads run
    in the program. The crawling will stop at the timeout, but the parsing will continue until finished



Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.
    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)
    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?
ANSWER:
    a) Sequential web crawler was created to work sequentially without using more than one thread at the same time, 
    thus it works better on a computer with only one thread. Parallel web crawler uses more resources from a one thread computer 
    because the hardware does not support parallelism.
    b) The parallel web crawler will perform better in scenarios which the program runs on a multi-core machine because
    with multi-core processing there can be multiple threads started and processing
    at once.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:
    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?
    (b) What are the join points of the Profiler in the web crawler program?
ANSWER:
    a) The cross-cutting concern is performance profiling.
    b) The methods with @Profiled annotation are being addressed. It is the join point of the Profiler.

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.
ANSWER:
    + Builder Pattern        - LIKE: The complex of the code is reduced, objects are much more flexible. 
                             - DISLIKE: I have to add more number of classes and/or interfaces of the project.

    + Proxy Pattern          - LIKE: It makes the application more secure.
                             - DISLIKE: It makes the code more complex, it is hard to implement.

    + Dependency Injection   - LIKE:  It uses the Guice plugin to inject dependencies.
                             - DISLIKE: It makes the code more complex, I have to understand the DI framework.